package catan;

import javafx.application.Application;
import javafx.geometry.VPos;
import javafx.event.ActionEvent;
import javafx.geometry.Rectangle2D;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.shape.*;
import javafx.scene.text.*;
import javafx.stage.Stage;
import simpleIO.Console;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.*;
import java.util.List;
import java.io.InputStream;
import java.util.ArrayList;
import javafx.stage.Screen;

public class Catan extends Application {
	
	// Get the user's screen dimensions
	private static Screen screen = Screen.getPrimary();
	private static Rectangle2D bounds = screen.getVisualBounds();
	
	// Set the screen size - re used in other drawing classes therefore is public static 
	public static final double SCREEN_WIDTH = bounds.getWidth();
	public static final double SCREEN_HEIGHT = bounds.getHeight();
	
	// Scale the board based on the screen size. Initialize all of the required variables
	public static ScreenScaling scale = new ScreenScaling(SCREEN_WIDTH, SCREEN_HEIGHT);
	
	// Initialize fonts
	Font xSmallFont = new Font("Arial", scale.getXSmallFont());
	Font smallFont = new Font("Arial", scale.getSmallFont());
	Font mediumFont = new Font("Arial", scale.getMediumFont());
	Font largeFont = new Font("Arial", scale.getLargeFont());
	Font xLargeFont = new Font("Arial", scale.getXLargeFont());
	
	// Initialize the different groups of the game
	private Group mainGroup = new Group(); // main group in which all of the others below go into
	
	private Group boardGroup = new Group();			// board tiles, places, etc
	private Group menuGroup = new Group();			// the main menu - first to be drawn
	private Group tutorialGroup = new Group(); 		// tutorial texts
	private Group playersUiGroup = new Group();		// ui for the players: items, id score etc
	private Group uiGroup = new Group();			// the other ui elements: buttons
	private Group backgroundGroup = new Group();	// the background of the board
	
	// Field for the scene so it can be interacted with outside of the start method
	private Scene scene;
	
	// Fullscreen toggle; fullscreen off by default
	private boolean fullscreen = false;
	
	// Set the background colours
	private final Color backgroundColor = Color.web("2f2f2f"); // 23272A // 2C2F33 //2f2f2f //313238
	private final Color contrastColor = Color.WHITE;
	
	// Initialize the board
	private Board board = Board.newBoardWithTiles();
	
	// Initialize the number of players the game should handle (limited to 2)
	public static int NUM_PLAYERS = 2;

	// Initialize logic based on the number of players
	public static Logic logic = new Logic(NUM_PLAYERS);
	
	// Get the players of the game based on the the ones generated by Logic
	private Player[] players = logic.getPlayers();
	
	// Fields for the elements that are changed every turn
	private Text rollText;
	private Button nextTurnButton;
	private Text currentPlayerText;
	private Text items;
	private Text buildings;
	private Button rollButton;
	
	@Override
	public void start(Stage stage) throws Exception {
		stage.setWidth(SCREEN_WIDTH);
		stage.setHeight(SCREEN_HEIGHT);
		
		// players should be updated per run
		players = logic.getPlayers();
	
		// Draw the different groups of the game, not in order
		drawMainMenu();
		drawBackground();
		drawBoard();
		drawPlayerUi();
		drawUi();
		drawTutorial();
		
		// First add the main menu group, as that is the one that shows up first
		mainGroup.getChildren().add(menuGroup);
		
		// Set the scene and background colour
		scene = new Scene(mainGroup, SCREEN_WIDTH, SCREEN_HEIGHT);
		
		scene.setFill(backgroundColor);
		
		scene.setOnKeyPressed(event -> handlefullScreenKeyPressed(event));
		
		// Set the icon for the game
		InputStream stream = getClass().getResourceAsStream("/images/icon.png");
		Image icon = new Image(stream);	
		stage.getIcons().add(icon);
		
		// Set up the stage
		stage.setFullScreen(fullscreen);
		stage.setTitle("Settlers of Catan");
		stage.setScene(scene);
		stage.show();
	}
	
	/*
	 * Launch the JavaFX App
	 */
	public static void main(String[] args) {
		launch(args);
	}
	
	/*
	 * Handle for starting the game from the menus
	 */
	private void handlePlayButtonClicked(ActionEvent event) {
		System.out.println("Play event = " + event);
		mainGroup.getChildren().clear();
		mainGroup.getChildren().addAll(backgroundGroup, uiGroup, playersUiGroup, boardGroup);
	}

	/*
	 * 	Handle for when the reset button is clicked. (Mostly a test/debug feature).
	 *  Resets game logic, clears the groups, resets the board and re-adds all of the new board and ui
	 */
	private void handleResetButtonClicked(ActionEvent event) {
		System.out.println("Reset event = " + event);
		logic.initGame();
		mainGroup.getChildren().clear();
		resetBoard();
		mainGroup.getChildren().addAll(backgroundGroup, uiGroup, playersUiGroup, boardGroup);
	}
	
	/*
	 * Handle the exit button. Terminates the program.
	 */
	private void handleExitButtonClicked(ActionEvent event) {
		System.out.println("Exit event = " + event);
		System.exit(0);
	}

	/* 
	 * Handle for when the roll button is clicked
	 * rolls dice and changes the roll text
	 */
	private void handleRollButtonClicked(ActionEvent event) {
		System.out.println("Roll event = " + event);
		logic.rollDice();
		logic.nextTurn();
		rollText.setText("Roll: " + logic.roll);
		currentPlayerText.setText("Current Player: " + logic.getCurrentPlayer().getId());
		
		updatePlayerUi();	
	}
	
	private void updatePlayerUi() {
		playersUiGroup.getChildren().clear();
		drawPlayerUi();
	}

	private void handleNextTurnButtonClicked(ActionEvent event) {
		System.out.println("Next Turn event = " + event);
		logic.nextTurn();
		Console.print(logic.initOver);
		currentPlayerText.setText("Current Player: " + logic.getCurrentPlayer().getId());
		nextTurnButton.setVisible(!logic.initOver);
		rollButton.setVisible(logic.initOver);
		
		updatePlayerUi();
		drawUi();
	}
	
	/**
	 * From the main menu, change the group to the tutorial group, showing the tutorial screen
	 */
	private void switchToTutorial() {
		mainGroup.getChildren().clear();
		mainGroup.getChildren().add(tutorialGroup);
	}
	
	/*
	 * When F11 is pressed, the window fullscreen is toggled
	 */
	private void handlefullScreenKeyPressed(KeyEvent event) {
		KeyCode code = event.getCode();
		if (code == KeyCode.F11) {
			fullscreen = !fullscreen;
			((Stage) scene.getWindow()).setFullScreen(fullscreen);
		}
	}

	/**
	 *  Draws the entire game board
	 */
	private void drawBoard() {
		boardGroup.getChildren().clear();
		List<Node> nodes = new ArrayList<>();
		
		List<Node> tileShapes = board.buildTileShapes();
		List<Node> placeShapes = board.buildPlaceShapes();
		nodes.addAll(tileShapes);
		nodes.addAll(placeShapes);
		
		boardGroup.getChildren().addAll(nodes);
	}
	
	/**
	 * Reset and redraw the board with new tiles.
	 */
	private void resetBoard() {
		board.reset();
		playersUiGroup.getChildren().clear();
		backgroundGroup.getChildren().clear();
		
		board = Board.newBoardWithTiles();

		drawBackground();
		drawPlayerUi();
		drawUi();
		drawBoard();
	}
	
	private void drawMainMenu() {
		menuGroup.getChildren().clear();
		List<Node> mainMenu = new ArrayList<Node>();
		
		Text title = new Text();
		title.setText("Settlers of Catan");
		title.setX(SCREEN_WIDTH/2 - title.getBoundsInLocal().getWidth() * 1.5);
		title.setY(SCREEN_HEIGHT/2 - title.getBoundsInLocal().getHeight() * 2);
		title.setTextOrigin(VPos.CENTER);
		title.setTextAlignment(TextAlignment.CENTER);
		title.setFont(xLargeFont);
		title.setFill(contrastColor);
		mainMenu.add(title);
		
		Button playButton = new Button();
		playButton.setText("Play");
		playButton.setLayoutX(SCREEN_WIDTH / 2);
		playButton.setLayoutY(SCREEN_HEIGHT / 2  + 2.5 * scale.getSmallFont());
		playButton.setOnAction(this::handlePlayButtonClicked);
		playButton.setFont(xSmallFont);
		mainMenu.add(playButton);
		
		Button tutorialButton = new Button();
		tutorialButton.setText("Tutorial");
		tutorialButton.setLayoutX(SCREEN_WIDTH/2);
		tutorialButton.setLayoutY(SCREEN_HEIGHT/2 + 5 * scale.getSmallFont());
		tutorialButton.setOnAction((event) -> switchToTutorial());
		tutorialButton.setFont(xSmallFont);
		mainMenu.add(tutorialButton);
		
		Button exitButton = new Button("Exit");
		exitButton.setLayoutX(SCREEN_WIDTH/2);
		exitButton.setLayoutY(SCREEN_HEIGHT/2  + 7.5 * scale.getSmallFont());
		exitButton.setOnAction(this::handleExitButtonClicked);
		exitButton.setFont(xSmallFont);
		mainMenu.add(exitButton);
		
		menuGroup.getChildren().addAll(mainMenu);
	}
	
	private void drawTutorial() {
		tutorialGroup.getChildren().clear();
		List<Node> tutorial = new ArrayList<Node>();
		
		Text tutorialText = new Text();
		tutorialText.setText("Settlers come from far away to the prosperous island of Catan to build their new civilization.\n"
				+ "The goal of the game is to be the first settler to have the greater settlement by having 10+ Victory Points (VPs).\n"
				+ "Two players strategically place their first buildings on the randomized board.\n"
				+ "The rich land of Catan offers the settlers with untapped resources: .\n"
				+ "Brick from the Hills, Ore from the Mountains, Wool from the Pastures,\n"
				+ "Grain from the Fields, and Lumber from the Forests.\n"
				+ "To gain earn VPs and resources players must build settlements, villages or cities, on a tile.\n"
				+ "These settlements can only be placed on the red intersections and after 2 roads have been built.\n"
				+ "Roads must go on the sides of the tiles, the white path markers.\n"
				+ "Once a settlement is built on a tile, the player who owns the building will earn that resource\n"
				+ "when the tile's value, displayed on white markers on the tiles, are rolled.\n"
				+ "\nF11 toggles fullscreen\n"
				+ "\nPlayer 1 = blue, Player 2 = red"
				+ "\nGame starts at Player 1. They Place their initial buildings (2 villages, 2 roads)"
				+ "\nClick the 'Next Turn' button. Now it's Player 2's turn to place their initial buildings."
				+ "\nWhen the initial phase is done, you can click roll to start.");
		
		tutorialText.setX(50);
		tutorialText.setY(50);
		tutorialText.setTextOrigin(VPos.TOP);
		tutorialText.setTextAlignment(TextAlignment.LEFT);
		tutorialText.setFont(mediumFont);
		tutorialText.setFill(contrastColor);
		tutorial.add(tutorialText);
		
		Button resumeButton = new Button();
		resumeButton.setText("Resume");
		resumeButton.setLayoutX(SCREEN_WIDTH/2);
		resumeButton.setLayoutY(SCREEN_HEIGHT/2 + 2.5 * scale.getSmallFont());
		resumeButton.setOnAction(this::handlePlayButtonClicked);
		resumeButton.setFont(xSmallFont);
		tutorial.add(resumeButton);
		
		Button exitButton = new Button("Exit");
		exitButton.setLayoutX(SCREEN_WIDTH/2);
		exitButton.setLayoutY(SCREEN_HEIGHT/2 + 5 * scale.getSmallFont());
		exitButton.setOnAction(this::handleExitButtonClicked);
		exitButton.setFont(xSmallFont);
		tutorial.add(exitButton);
		
		Button backButton = new Button("Back");
		backButton.setLayoutX(SCREEN_WIDTH/2);
		backButton.setLayoutY(SCREEN_HEIGHT/2 + 7.5 * scale.getSmallFont());
		backButton.setOnAction(event -> { mainGroup.getChildren().clear(); mainGroup.getChildren().add(menuGroup); });
		backButton.setFont(xSmallFont);
		tutorial.add(backButton);

		tutorialGroup.getChildren().addAll(tutorial);
	}
	
	private void drawUi() {
		uiGroup.getChildren().clear();
		List<Node> ui = new ArrayList<Node>();		
		
		Button resetButton = new Button("Reset");
		resetButton.setLayoutX(5);
		resetButton.setLayoutY(5);
		resetButton.setOnAction(this::handleResetButtonClicked);
		resetButton.setFont(xSmallFont);
		ui.add(resetButton);

		Button exitButton = new Button("Exit");
		exitButton.setLayoutX(xSmallFont.getSize() * 5);
		exitButton.setLayoutY(5);
		exitButton.setOnAction(this::handleExitButtonClicked);
		exitButton.setFont(xSmallFont);
		ui.add(exitButton);

		rollButton = new Button("Roll");
		rollButton.setLayoutX(xSmallFont.getSize() * 14.5);
		rollButton.setLayoutY(5);
		rollButton.setOnAction(this::handleRollButtonClicked);
		rollButton.setFont(xSmallFont);
		rollButton.setVisible(logic.initOver);
		ui.add(rollButton);
		
		rollText = new Text();
		rollText.setText("Roll");
		rollText.setX(SCREEN_WIDTH / 2);
		rollText.setY(xSmallFont.getSize() * 2);
		rollText.setFill(contrastColor);
		rollText.setFont(xSmallFont);
		ui.add(rollText);
		
		currentPlayerText = new Text("Current Player: " + logic.getCurrentPlayer().getId());
		currentPlayerText.setX(SCREEN_WIDTH / 2);
		currentPlayerText.setY(xSmallFont.getSize() * 5);
		currentPlayerText.setFill(contrastColor);
		currentPlayerText.setFont(xSmallFont);
		ui.add(currentPlayerText);
		
		//overlay roll button before - disappears after init over
		nextTurnButton = new Button("Next Turn");
		nextTurnButton.setLayoutX(xSmallFont.getSize() * 14.5);
		nextTurnButton.setLayoutY(5);
		nextTurnButton.setVisible(!logic.initOver);
		nextTurnButton.setFont(xSmallFont);
		nextTurnButton.setOnAction(this::handleNextTurnButtonClicked);
		ui.add(nextTurnButton);
		
		Button tutorialButton = new Button();
		tutorialButton.setText("Tutorial");
		tutorialButton.setLayoutX(xSmallFont.getSize() * 9);
		tutorialButton.setLayoutY(5);
		tutorialButton.setOnAction((event) -> switchToTutorial());
		tutorialButton.setFont(xSmallFont);
		ui.add(tutorialButton);
		
		uiGroup.getChildren().addAll(ui);
	}
	
	private void drawBackground() {
		backgroundGroup.getChildren().clear();
		List<Node> background = new ArrayList<Node>();
		
		Circle boardCircle = new Circle();
		boardCircle.setFill(Color.SKYBLUE);
		boardCircle.setRadius(5 * TileGraphics.EDGE);
		boardCircle.setCenterX(SCREEN_WIDTH / 2);
		boardCircle.setCenterY(SCREEN_HEIGHT / 2);
		background.add(boardCircle);
		
		Circle boardCircleBlank = new Circle();
		boardCircleBlank.setFill(contrastColor);
		boardCircleBlank.setRadius(4 * TileGraphics.EDGE  - TileGraphics.EDGE/2); //4.9 (1080p)  5.1 //5.45 * .2
		boardCircleBlank.setCenterX(SCREEN_WIDTH / 2);
		boardCircleBlank.setCenterY(SCREEN_HEIGHT / 2);
		background.add(boardCircleBlank);
		
		backgroundGroup.getChildren().addAll(background);
	}
	
	private void drawPlayerUi() {
		playersUiGroup.getChildren().clear();
		List<Node> playersUi = new ArrayList<>();
		
		for (int n = 0; n < NUM_PLAYERS; n++) {
			Text id = new Text();
			id.setX((players[n].getId() == 1) ? 50 : SCREEN_WIDTH/1.25);
			id.setY(smallFont.getSize() * 4);
			id.setText("ID: " + Integer.toString(players[n].getId()));
			id.setFill(contrastColor);
			id.setFont(smallFont);
			
			Text vp = new Text( (n == 1) ? 50 : SCREEN_WIDTH/1.25, smallFont.getSize() * 6, "VP: " + Integer.toString(players[n].getVp()));
			vp.setFill(contrastColor);
			vp.setFont(smallFont);
			
			String itemsText = getItemListAsString(n);
			
			items = new Text( (n == 1) ? 50 : SCREEN_WIDTH/1.25, smallFont.getSize() * 8, "ITEMS:\n" + itemsText);
			items.setFill(contrastColor);
			items.setFont(smallFont);
			items.setWrappingWidth(SCREEN_WIDTH/1.25);
			
			String buildingsText = getBuildingListAsString(n);
			
			buildings = new Text( (n == 1) ? SCREEN_WIDTH/10 : SCREEN_WIDTH/1.10, smallFont.getSize() * 8, "BUILDINGS:\n" + buildingsText);
			buildings.setFont(smallFont);
			buildings.setFill(contrastColor);
			buildings.setWrappingWidth(SCREEN_WIDTH/1.25);

			playersUi.add(id);
			playersUi.add(vp);
			playersUi.add(items);
			playersUi.add(buildings);
			
		}
		playersUiGroup.getChildren().addAll(playersUi);
	}
	/** For drawing the player ui buildings list properly
	 * @param pos
	 * @return
	 */
	private String getBuildingListAsString(int pos) {
		String buildingsText = "";
		for (int y = 0; y < players[pos].getBuildings().size(); y++) {
			if (y < players[pos].getBuildings().size() - 1) {
				buildingsText += players[pos].getBuildings().get(y).getType().getLabel() + "\n";
			} else {
				buildingsText += players[pos].getBuildings().get(y).getType().getLabel();
			}
		}
		return buildingsText;
	}
	/** For drawing the player ui item list properly
	 * @param pos
	 * @return
	 */
	private String getItemListAsString(int pos) {
		String itemsText = "";
		for (int y = 0; y < players[pos].getItems().size(); y++) {
			if (y < players[pos].getItems().size() - 1) {
				itemsText += players[pos].getItems().get(y).getType().getLabel() + "\n";
			} else {
				itemsText += players[pos].getItems().get(y).getType().getLabel();
			}
		}
		return itemsText;
	}

}